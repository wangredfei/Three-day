day08.txt
1.运算符
	1.比较运算符（关系运算符）
		> >= < <= == != ===(恒等) !==(不恒等)
		1.比较运算符用来判断表达式之间的关系，结果为布尔类型
		2.分类
			1.number 与其他类型之间的比较
				过程：将非number数据转换成number，再进行比较
				注意：NaN 与任意数据比较，结果都为false
			2.字符串之间的比较
				1.字符串之间比较，不会进行数据类型转换
				2.从前往后依次比较每位字符的Unicode码
			3.字符串与布尔类型的比较
				例：
					"10" > true //true
					"10a" > true //false
					注：先转number在比较
		3.相等与全等
			1.相等，包含自动类型转换，只要值相等，就成立
			 	例：
			 		'10' == 10 //true
			2.全等：不会进行自动类型转换，要求类型一致，值相等，才视为成立
				例：
					'10' === 10 //false
					'10' !== 10 //true
	2.逻辑运算符
		1.将多个条件表达式的结果组合成最终单一的布尔值
		2.分类：
			1.&& :逻辑与
				俩个表达式都成立，最终结果才成立，为true.(全1则1)
				例：
					5 > 3 && '10' > '2' //false
			2.||:逻辑或
				俩个表达式中只要有一个成立，最终结果都为true.(有1则1)
				例：
					5 > 3 || '10' > '2' //true
			3.！：逻辑非
				对布尔结果取反操作
				非真既假，非假既真
				例：
					！(5 > 3) //false
					!false    //true
					!5        //false
					注：除零值以外的所有值都为真，零值为假
		3.位运算
			1.数据在计算机中都是以二进制存储，位运算是指直接对二进制位操作
			2.分类：
				1.位与：&
					将操作数转换成二进制形式，按位进行操作
					例：
						3 	&	 5
						011 &	101
					注：任何整数与1做位与，可以判断奇偶
						结果为1，操作数为奇数，结果为0，操作数为偶数
						例：
							3 & 1 //011 & 001 = 001 奇数
							2 & 1 // 010 & 001 = 000 偶数
				2.位或 ： |
					对二进制位进行或操作，有1则1
					例：
						3 | 5 // 011 | 101 = 111   *7
				3.异或：^
					比较二进制位，相同为0，不同为1
					例：
						3 ^ 5 // 011 ^　101 = 110   *6
						注：
							异或可以在不借助第三方变量的情况下，互换俩个变量的值
				4.三目运算符(三元)
					语法:
						条件1 ? 表达式1:表达式2;
						过程:
							判断条件1 是否成立/
							成立执行表达式1
							不成立,执行表达式2
							返回结果

2.流程控制
	1.控制代码的执行顺序
	2.分类：
		1.顺序结构
			自上而下，依次执行所有的代码语句
		2.分支（选择）结构
			根据条件是否成立，选择执行某段代码
			1.if语句
				1.if(条件){
					条件成立时执行
				}
				注：
					1.{}可以省略,省略之后，if条件满足时，只执行后面紧跟的一条语句
					2.零值为假：
						if(0){}
						if(0.00){}
						if(''){}
						if(NaN){}
						if(undefined){}
						if(null){}
						注：带有空格的字符串视为真
				2.if-else
					语法：if(条件){
						//成立时执行
					}else{
						//条件不成立时执行
					}
				3.多重分支
					语法：
						if(条件1){
							//条件1成立执行
						}else if(条件2){
							//条件2成立时执行
						}else if(条件3){
							//条件3成立执行
						}else{

						}
			2.switch语句
				主要用来做值得匹配
				语法：
					switch(变量){
						case 值1：
							//匹配成功执行的代码段
							break;//结束匹配
						...
						default:
							console.log("匹配失败，默认执行的操作");
							break;
					}
				注意：
					1.switch进行值的全等匹配，要求类型与值都一致，才能匹配成功
					2.case 用来列举所有可能的取值情况
					3.break用于结束匹配，可以省略；如果省略break，会从当前匹配到的  case开始执行所有case中的代码
					4.多个case可以共用代码段
					5.default 表示默认情况，写在最后，表示所有case都匹配失败
						最终执行的操作
		3.循环结构
			1.重复执行某一段代码
			2.循环三要素：
				循环变量；
				循环执行条件；
				循环体；
			3.分类：
				1.while循环
					语法：
						循环变量；
						while(循环条件){
							循环体
						}
					例：
						var i = 1;
						while(i<101){
							console.log('真优秀');
							//更新循环变量
							i++;
						}
						执行流程：
							1.定义循环变量
							2.判断循环条件
							3.条件成立，执行循环体
							4.循环体中更新循环变量，避免死循环
							5.重复2-3-4，直到条件不成立，结束循环
				2.do-while 循环
					语法：
						循环变量
						do{
							循环体
							更新循环变量
						}while(循环条件);
					总结：do-while 不管循环条件是否成立，至少执行一遍循环体
							更适合用于不确定循环次数的场合
						while 先判断后执行，更适用于明确循环次数的场合
				3.for循环
					语法：
						for(定义循环变量；循环条件；更新变量){
							循环体
						}
					循环控制：
						1.break：用于结束循环，后面的代码都不执行
						2.continue：跳出本次循环，开始下一次循环
					循环嵌套：
						在循环体中嵌套使用其他的循环体
						